import {
  NativeEventEmitter_default,
  NativeModules_default,
  Platform_default
} from "./chunk-ZGUEPV2B.js";
import {
  __commonJS,
  __publicField,
  __toESM,
  require_react
} from "./chunk-QG5CKJVI.js";

// ../node_modules/invariant/browser.js
var require_browser = __commonJS({
  "../node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant2 = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant2;
  }
});

// ../node_modules/compare-versions/index.js
var require_compare_versions = __commonJS({
  "../node_modules/compare-versions/index.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof exports === "object") {
        module.exports = factory();
      } else {
        root.compareVersions = factory();
      }
    })(exports, function() {
      var semver = /^v?(?:\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+)(\.(?:[x*]|\d+))?(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
      function indexOrEnd(str, q) {
        return str.indexOf(q) === -1 ? str.length : str.indexOf(q);
      }
      function split(v) {
        var c = v.replace(/^v/, "").replace(/\+.*$/, "");
        var patchIndex = indexOrEnd(c, "-");
        var arr = c.substring(0, patchIndex).split(".");
        arr.push(c.substring(patchIndex + 1));
        return arr;
      }
      function tryParse(v) {
        return isNaN(Number(v)) ? v : Number(v);
      }
      function validate(version) {
        if (typeof version !== "string") {
          throw new TypeError("Invalid argument expected string");
        }
        if (!semver.test(version)) {
          throw new Error("Invalid argument not valid semver ('" + version + "' received)");
        }
      }
      function compareVersions2(v1, v2) {
        [v1, v2].forEach(validate);
        var s1 = split(v1);
        var s2 = split(v2);
        for (var i = 0; i < Math.max(s1.length - 1, s2.length - 1); i++) {
          var n1 = parseInt(s1[i] || 0, 10);
          var n2 = parseInt(s2[i] || 0, 10);
          if (n1 > n2)
            return 1;
          if (n2 > n1)
            return -1;
        }
        var sp1 = s1[s1.length - 1];
        var sp2 = s2[s2.length - 1];
        if (sp1 && sp2) {
          var p1 = sp1.split(".").map(tryParse);
          var p2 = sp2.split(".").map(tryParse);
          for (i = 0; i < Math.max(p1.length, p2.length); i++) {
            if (p1[i] === void 0 || typeof p2[i] === "string" && typeof p1[i] === "number")
              return -1;
            if (p2[i] === void 0 || typeof p1[i] === "string" && typeof p2[i] === "number")
              return 1;
            if (p1[i] > p2[i])
              return 1;
            if (p2[i] > p1[i])
              return -1;
          }
        } else if (sp1 || sp2) {
          return sp1 ? -1 : 1;
        }
        return 0;
      }
      ;
      var allowedOperators = [
        ">",
        ">=",
        "=",
        "<",
        "<="
      ];
      var operatorResMap = {
        ">": [1],
        ">=": [0, 1],
        "=": [0],
        "<=": [-1, 0],
        "<": [-1]
      };
      function validateOperator(op) {
        if (typeof op !== "string") {
          throw new TypeError("Invalid operator type, expected string but got " + typeof op);
        }
        if (allowedOperators.indexOf(op) === -1) {
          throw new TypeError("Invalid operator, expected one of " + allowedOperators.join("|"));
        }
      }
      compareVersions2.validate = function(version) {
        return typeof version === "string" && semver.test(version);
      };
      compareVersions2.compare = function(v1, v2, operator) {
        validateOperator(operator);
        var res = compareVersions2(v1, v2);
        return operatorResMap[operator].indexOf(res) > -1;
      };
      return compareVersions2;
    });
  }
});

// ../node_modules/expo-modules-core/build/errors/CodedError.js
var CodedError = class extends Error {
  constructor(code, message) {
    super(message);
    __publicField(this, "code");
    __publicField(this, "info");
    this.code = code;
  }
};

// ../node_modules/expo-modules-core/build/environment/browser.web.js
var _a;
var isDOMAvailable = typeof window !== "undefined" && !!((_a = window.document) == null ? void 0 : _a.createElement);
var canUseEventListeners = isDOMAvailable && !!(window.addEventListener || window.attachEvent);
var canUseViewport = isDOMAvailable && !!window.screen;
var isAsyncDebugging = false;

// ../node_modules/expo-modules-core/build/Platform.js
var Platform = {
  /**
   * Denotes the currently running platform.
   * Can be one of ios, android, web.
   */
  OS: Platform_default.OS,
  /**
   * Returns the value with the matching platform.
   * Object keys can be any of ios, android, native, web, default.
   *
   * @ios ios, native, default
   * @android android, native, default
   * @web web, default
   */
  select: Platform_default.select,
  /**
   * Denotes if the DOM API is available in the current environment.
   * The DOM is not available in native React runtimes and Node.js.
   */
  isDOMAvailable,
  /**
   * Denotes if the current environment can attach event listeners
   * to the window. This will return false in native React
   * runtimes and Node.js.
   */
  canUseEventListeners,
  /**
   * Denotes if the current environment can inspect properties of the
   * screen on which the current window is being rendered. This will
   * return false in native React runtimes and Node.js.
   */
  canUseViewport,
  /**
   * If the JavaScript is being executed in a remote JavaScript environment.
   * When `true`, synchronous native invocations cannot be executed.
   */
  isAsyncDebugging
};
var Platform_default2 = Platform;

// ../node_modules/expo-modules-core/build/errors/UnavailabilityError.js
var UnavailabilityError = class extends CodedError {
  constructor(moduleName, propertyName) {
    super("ERR_UNAVAILABLE", `The method or property ${moduleName}.${propertyName} is not available on ${Platform_default2.OS}, are you sure you've linked all the native dependencies properly?`);
  }
};

// ../node_modules/expo-modules-core/build/PermissionsInterface.js
var PermissionStatus;
(function(PermissionStatus2) {
  PermissionStatus2["GRANTED"] = "granted";
  PermissionStatus2["UNDETERMINED"] = "undetermined";
  PermissionStatus2["DENIED"] = "denied";
})(PermissionStatus || (PermissionStatus = {}));

// ../node_modules/expo-modules-core/build/PermissionsHook.js
var import_react = __toESM(require_react());
function usePermission(methods, options) {
  const isMounted = (0, import_react.useRef)(true);
  const [status, setStatus] = (0, import_react.useState)(null);
  const { get = true, request = false, ...permissionOptions } = options || {};
  const getPermission = (0, import_react.useCallback)(async () => {
    const response = await methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : void 0);
    if (isMounted.current)
      setStatus(response);
    return response;
  }, [methods.getMethod]);
  const requestPermission = (0, import_react.useCallback)(async () => {
    const response = await methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : void 0);
    if (isMounted.current)
      setStatus(response);
    return response;
  }, [methods.requestMethod]);
  (0, import_react.useEffect)(function runMethods() {
    if (request)
      requestPermission();
    if (!request && get)
      getPermission();
  }, [get, request, requestPermission, getPermission]);
  (0, import_react.useEffect)(function didMount() {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return [status, requestPermission, getPermission];
}
function createPermissionHook(methods) {
  return (options) => usePermission(methods, options);
}

// ../node_modules/expo-modules-core/build/EventEmitter.js
var import_invariant = __toESM(require_browser());
var nativeEmitterSubscriptionKey = "@@nativeEmitterSubscription@@";
var EventEmitter = class {
  constructor(nativeModule) {
    __publicField(this, "_listenerCount", 0);
    __publicField(this, "_nativeModule");
    __publicField(this, "_eventEmitter");
    if (nativeModule.__expo_module_name__ && NativeModules_default.EXReactNativeEventEmitter) {
      nativeModule.addListener = (...args) => NativeModules_default.EXReactNativeEventEmitter.addProxiedListener(nativeModule.__expo_module_name__, ...args);
      nativeModule.removeListeners = (...args) => NativeModules_default.EXReactNativeEventEmitter.removeProxiedListeners(nativeModule.__expo_module_name__, ...args);
    }
    this._nativeModule = nativeModule;
    this._eventEmitter = new NativeEventEmitter_default(nativeModule);
  }
  addListener(eventName, listener) {
    if (!this._listenerCount && Platform_default.OS !== "ios" && this._nativeModule.startObserving) {
      this._nativeModule.startObserving();
    }
    this._listenerCount++;
    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
    const subscription = {
      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,
      remove: () => {
        this.removeSubscription(subscription);
      }
    };
    return subscription;
  }
  removeAllListeners(eventName) {
    const removedListenerCount = this._eventEmitter.listenerCount ? (
      // @ts-ignore: this is available since 0.64
      this._eventEmitter.listenerCount(eventName)
    ) : (
      // @ts-ignore: this is available in older versions
      this._eventEmitter.listeners(eventName).length
    );
    this._eventEmitter.removeAllListeners(eventName);
    this._listenerCount -= removedListenerCount;
    (0, import_invariant.default)(this._listenerCount >= 0, `EventEmitter must have a non-negative number of listeners`);
    if (!this._listenerCount && Platform_default.OS !== "ios" && this._nativeModule.stopObserving) {
      this._nativeModule.stopObserving();
    }
  }
  removeSubscription(subscription) {
    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];
    if (!nativeEmitterSubscription) {
      return;
    }
    if ("remove" in nativeEmitterSubscription) {
      nativeEmitterSubscription.remove();
    } else if ("removeSubscription" in this._eventEmitter) {
      this._eventEmitter.removeSubscription(nativeEmitterSubscription);
    }
    this._listenerCount--;
    delete subscription[nativeEmitterSubscriptionKey];
    subscription.remove = () => {
    };
    if (!this._listenerCount && Platform_default.OS !== "ios" && this._nativeModule.stopObserving) {
      this._nativeModule.stopObserving();
    }
  }
  emit(eventName, ...params) {
    this._eventEmitter.emit(eventName, ...params);
  }
};

// ../node_modules/expo-modules-core/build/NativeModulesProxy.js
var NativeModulesProxy_default = {};

// ../node_modules/expo-modules-core/build/sweet/NativeErrorManager.js
var NativeErrorManager_default = NativeModulesProxy_default.ExpoModulesCoreErrorManager;

// ../node_modules/expo-modules-core/build/sweet/setUpErrorManager.fx.js
if (__DEV__ && Platform_default2.OS === "android" && NativeErrorManager_default) {
  const onNewException = "ExpoModulesCoreErrorManager.onNewException";
  const eventEmitter = new EventEmitter(NativeErrorManager_default);
  eventEmitter.addListener(onNewException, ({ message }) => {
    console.error(message);
  });
}
globalThis.ExpoModulesCore_CodedError = CodedError;

// ../node_modules/expo-modules-core/build/deprecate.js
var import_compare_versions = __toESM(require_compare_versions());

export {
  require_browser,
  Platform_default2 as Platform_default,
  CodedError,
  UnavailabilityError,
  PermissionStatus,
  createPermissionHook
};
//# sourceMappingURL=chunk-A6OG7HSN.js.map
