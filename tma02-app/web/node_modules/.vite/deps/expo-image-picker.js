import {
  CodedError,
  PermissionStatus,
  Platform_default,
  UnavailabilityError,
  createPermissionHook
} from "./chunk-A6OG7HSN.js";
import "./chunk-ZGUEPV2B.js";
import "./chunk-PZ5AM5BG.js";
import "./chunk-QG5CKJVI.js";

// ../node_modules/expo-image-picker/build/ImagePicker.types.js
var MediaTypeOptions;
(function(MediaTypeOptions2) {
  MediaTypeOptions2["All"] = "All";
  MediaTypeOptions2["Videos"] = "Videos";
  MediaTypeOptions2["Images"] = "Images";
})(MediaTypeOptions || (MediaTypeOptions = {}));
var VideoExportPreset;
(function(VideoExportPreset2) {
  VideoExportPreset2[VideoExportPreset2["Passthrough"] = 0] = "Passthrough";
  VideoExportPreset2[VideoExportPreset2["LowQuality"] = 1] = "LowQuality";
  VideoExportPreset2[VideoExportPreset2["MediumQuality"] = 2] = "MediumQuality";
  VideoExportPreset2[VideoExportPreset2["HighestQuality"] = 3] = "HighestQuality";
  VideoExportPreset2[VideoExportPreset2["H264_640x480"] = 4] = "H264_640x480";
  VideoExportPreset2[VideoExportPreset2["H264_960x540"] = 5] = "H264_960x540";
  VideoExportPreset2[VideoExportPreset2["H264_1280x720"] = 6] = "H264_1280x720";
  VideoExportPreset2[VideoExportPreset2["H264_1920x1080"] = 7] = "H264_1920x1080";
  VideoExportPreset2[VideoExportPreset2["H264_3840x2160"] = 8] = "H264_3840x2160";
  VideoExportPreset2[VideoExportPreset2["HEVC_1920x1080"] = 9] = "HEVC_1920x1080";
  VideoExportPreset2[VideoExportPreset2["HEVC_3840x2160"] = 10] = "HEVC_3840x2160";
})(VideoExportPreset || (VideoExportPreset = {}));
var UIImagePickerControllerQualityType;
(function(UIImagePickerControllerQualityType2) {
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["High"] = 0] = "High";
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["Medium"] = 1] = "Medium";
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["Low"] = 2] = "Low";
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["VGA640x480"] = 3] = "VGA640x480";
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["IFrame1280x720"] = 4] = "IFrame1280x720";
  UIImagePickerControllerQualityType2[UIImagePickerControllerQualityType2["IFrame960x540"] = 5] = "IFrame960x540";
})(UIImagePickerControllerQualityType || (UIImagePickerControllerQualityType = {}));
var UIImagePickerPresentationStyle;
(function(UIImagePickerPresentationStyle2) {
  UIImagePickerPresentationStyle2["FULL_SCREEN"] = "fullScreen";
  UIImagePickerPresentationStyle2["PAGE_SHEET"] = "pageSheet";
  UIImagePickerPresentationStyle2["FORM_SHEET"] = "formSheet";
  UIImagePickerPresentationStyle2["CURRENT_CONTEXT"] = "currentContext";
  UIImagePickerPresentationStyle2["OVER_FULL_SCREEN"] = "overFullScreen";
  UIImagePickerPresentationStyle2["OVER_CURRENT_CONTEXT"] = "overCurrentContext";
  UIImagePickerPresentationStyle2["POPOVER"] = "popover";
  UIImagePickerPresentationStyle2["AUTOMATIC"] = "automatic";
})(UIImagePickerPresentationStyle || (UIImagePickerPresentationStyle = {}));
var UIImagePickerPreferredAssetRepresentationMode;
(function(UIImagePickerPreferredAssetRepresentationMode2) {
  UIImagePickerPreferredAssetRepresentationMode2["Automatic"] = "automatic";
  UIImagePickerPreferredAssetRepresentationMode2["Compatible"] = "compatible";
  UIImagePickerPreferredAssetRepresentationMode2["Current"] = "current";
})(UIImagePickerPreferredAssetRepresentationMode || (UIImagePickerPreferredAssetRepresentationMode = {}));
var CameraType;
(function(CameraType2) {
  CameraType2["back"] = "back";
  CameraType2["front"] = "front";
})(CameraType || (CameraType = {}));

// ../node_modules/expo-image-picker/build/ExponentImagePicker.web.js
var MediaTypeInput = {
  [MediaTypeOptions.All]: "video/mp4,video/quicktime,video/x-m4v,video/*,image/*",
  [MediaTypeOptions.Images]: "image/*",
  [MediaTypeOptions.Videos]: "video/mp4,video/quicktime,video/x-m4v,video/*"
};
var ExponentImagePicker_web_default = {
  get name() {
    return "ExponentImagePicker";
  },
  async launchImageLibraryAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false }) {
    if (!Platform_default.isDOMAvailable) {
      return { canceled: true, assets: null };
    }
    return await openFileBrowserAsync({
      mediaTypes,
      allowsMultipleSelection,
      base64
    });
  },
  async launchCameraAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false }) {
    if (!Platform_default.isDOMAvailable) {
      return { canceled: true, assets: null };
    }
    return await openFileBrowserAsync({
      mediaTypes,
      allowsMultipleSelection,
      capture: true,
      base64
    });
  },
  /*
   * Delegate to expo-permissions to request camera permissions
   */
  async getCameraPermissionsAsync() {
    return permissionGrantedResponse();
  },
  async requestCameraPermissionsAsync() {
    return permissionGrantedResponse();
  },
  /*
   * Camera roll permissions don't need to be requested on web, so we always
   * respond with granted.
   */
  async getMediaLibraryPermissionsAsync(_writeOnly) {
    return permissionGrantedResponse();
  },
  async requestMediaLibraryPermissionsAsync(_writeOnly) {
    return permissionGrantedResponse();
  }
};
function permissionGrantedResponse() {
  return {
    status: PermissionStatus.GRANTED,
    expires: "never",
    granted: true,
    canAskAgain: true
  };
}
function openFileBrowserAsync({ mediaTypes, capture = false, allowsMultipleSelection = false, base64 }) {
  const mediaTypeFormat = MediaTypeInput[mediaTypes];
  const input = document.createElement("input");
  input.style.display = "none";
  input.setAttribute("type", "file");
  input.setAttribute("accept", mediaTypeFormat);
  input.setAttribute("id", String(Math.random()));
  if (allowsMultipleSelection) {
    input.setAttribute("multiple", "multiple");
  }
  if (capture) {
    input.setAttribute("capture", "camera");
  }
  document.body.appendChild(input);
  return new Promise((resolve) => {
    input.addEventListener("change", async () => {
      if (input.files) {
        const files = allowsMultipleSelection ? input.files : [input.files[0]];
        const assets = await Promise.all(Array.from(files).map((file) => readFile(file, { base64 })));
        resolve({ canceled: false, assets });
      } else {
        resolve({ canceled: true, assets: null });
      }
      document.body.removeChild(input);
    });
    const event = new MouseEvent("click");
    input.dispatchEvent(event);
  });
}
function readFile(targetFile, options) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => {
      reject(new Error(`Failed to read the selected media because the operation failed.`));
    };
    reader.onload = ({ target }) => {
      const uri = target.result;
      const returnRaw = () => resolve({ uri, width: 0, height: 0 });
      if (typeof uri === "string") {
        const image = new Image();
        image.src = uri;
        image.onload = () => {
          resolve({
            uri,
            width: image.naturalWidth ?? image.width,
            height: image.naturalHeight ?? image.height,
            // The blob's result cannot be directly decoded as Base64 without
            // first removing the Data-URL declaration preceding the
            // Base64-encoded data. To retrieve only the Base64 encoded string,
            // first remove data:*/*;base64, from the result.
            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            ...options.base64 && { base64: uri.substr(uri.indexOf(",") + 1) }
          });
        };
        image.onerror = () => returnRaw();
      } else {
        returnRaw();
      }
    };
    reader.readAsDataURL(targetFile);
  });
}

// ../node_modules/expo-image-picker/build/ImagePicker.js
function validateOptions(options) {
  const { aspect, quality, videoMaxDuration } = options;
  if (aspect != null) {
    const [x, y] = aspect;
    if (x <= 0 || y <= 0) {
      throw new CodedError("ERR_INVALID_ARGUMENT", `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`);
    }
  }
  if (quality && (quality < 0 || quality > 1)) {
    throw new CodedError("ERR_INVALID_ARGUMENT", `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`);
  }
  if (videoMaxDuration && videoMaxDuration < 0) {
    throw new CodedError("ERR_INVALID_ARGUMENT", `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`);
  }
  return options;
}
var DEPRECATED_RESULT_KEYS = [
  "uri",
  "assetId",
  "width",
  "height",
  "type",
  "exif",
  "base64",
  "duration",
  "fileName",
  "fileSize"
];
function mergeDeprecatedResult(result) {
  var _a;
  const firstAsset = (_a = result == null ? void 0 : result.assets) == null ? void 0 : _a[0];
  const deprecatedResult = {
    ...result,
    get cancelled() {
      console.warn('Key "cancelled" in the image picker result is deprecated and will be removed in SDK 48, use "canceled" instead');
      return this.canceled;
    }
  };
  for (const key of DEPRECATED_RESULT_KEYS) {
    Object.defineProperty(deprecatedResult, key, {
      get() {
        console.warn(`Key "${key}" in the image picker result is deprecated and will be removed in SDK 48, you can access selected assets through the "assets" array instead`);
        return firstAsset == null ? void 0 : firstAsset[key];
      }
    });
  }
  return deprecatedResult;
}
async function getCameraPermissionsAsync() {
  return ExponentImagePicker_web_default.getCameraPermissionsAsync();
}
async function getMediaLibraryPermissionsAsync(writeOnly = false) {
  return ExponentImagePicker_web_default.getMediaLibraryPermissionsAsync(writeOnly);
}
async function requestCameraPermissionsAsync() {
  return ExponentImagePicker_web_default.requestCameraPermissionsAsync();
}
async function requestMediaLibraryPermissionsAsync(writeOnly = false) {
  const imagePickerMethod = ExponentImagePicker_web_default.requestMediaLibraryPermissionsAsync;
  return imagePickerMethod(writeOnly);
}
var useMediaLibraryPermissions = createPermissionHook({
  // TODO(cedric): permission requesters should have an options param or a different requester
  getMethod: (options) => getMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly),
  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options == null ? void 0 : options.writeOnly)
});
var useCameraPermissions = createPermissionHook({
  getMethod: getCameraPermissionsAsync,
  requestMethod: requestCameraPermissionsAsync
});
async function getPendingResultAsync() {
  if (ExponentImagePicker_web_default.getPendingResultAsync) {
    return ExponentImagePicker_web_default.getPendingResultAsync();
  }
  return [];
}
async function launchCameraAsync(options = {}) {
  if (!ExponentImagePicker_web_default.launchCameraAsync) {
    throw new UnavailabilityError("ImagePicker", "launchCameraAsync");
  }
  const result = await ExponentImagePicker_web_default.launchCameraAsync(validateOptions(options));
  return mergeDeprecatedResult(result);
}
async function launchImageLibraryAsync(options) {
  if (!ExponentImagePicker_web_default.launchImageLibraryAsync) {
    throw new UnavailabilityError("ImagePicker", "launchImageLibraryAsync");
  }
  if ((options == null ? void 0 : options.allowsEditing) && options.allowsMultipleSelection) {
    console.warn("[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' to fix this warning.");
  }
  const result = await ExponentImagePicker_web_default.launchImageLibraryAsync(options ?? {});
  return mergeDeprecatedResult(result);
}
export {
  CameraType,
  MediaTypeOptions,
  PermissionStatus,
  UIImagePickerControllerQualityType,
  UIImagePickerPreferredAssetRepresentationMode,
  UIImagePickerPresentationStyle,
  VideoExportPreset,
  getCameraPermissionsAsync,
  getMediaLibraryPermissionsAsync,
  getPendingResultAsync,
  launchCameraAsync,
  launchImageLibraryAsync,
  requestCameraPermissionsAsync,
  requestMediaLibraryPermissionsAsync,
  useCameraPermissions,
  useMediaLibraryPermissions
};
//# sourceMappingURL=expo-image-picker.js.map
