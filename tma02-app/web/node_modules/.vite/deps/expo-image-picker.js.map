{
  "version": 3,
  "sources": ["../../../../node_modules/expo-image-picker/src/ImagePicker.types.ts", "../../../../node_modules/expo-image-picker/src/ExponentImagePicker.web.ts", "../../../../node_modules/expo-image-picker/src/ImagePicker.ts"],
  "sourcesContent": ["import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `expo-modules-core`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = PermissionResponse & {\n  /**\n   * @platform ios\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ •\n   * Video compression: __None__ •\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 × 480__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 × 540__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 × 720__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __H.264__ •\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 × 1080__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 × 2160__ •\n   * Video compression: __HEVC__ •\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 × 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 × 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 × 540\n   */\n  IFrame960x540 = 5,\n}\n\n/**\n * Picker presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle).\n *\n * @platform ios\n */\nexport enum UIImagePickerPresentationStyle {\n  /**\n   * A presentation style in which the presented picker covers the screen.\n   */\n  FULL_SCREEN = 'fullScreen',\n  /**\n   * A presentation style that partially covers the underlying content.\n   */\n  PAGE_SHEET = 'pageSheet',\n  /**\n   * A presentation style that displays the picker centered in the screen.\n   */\n  FORM_SHEET = 'formSheet',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  CURRENT_CONTEXT = 'currentContext',\n  /**\n   * A presentation style in which the picker view covers the screen.\n   */\n  OVER_FULL_SCREEN = 'overFullScreen',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  OVER_CURRENT_CONTEXT = 'overCurrentContext',\n  /**\n   * A presentation style where the picker is displayed in a popover view.\n   */\n  POPOVER = 'popover',\n  /**\n   * The default presentation style chosen by the system.\n   * On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.\n   *\n   * @platform ios 13+\n   */\n  AUTOMATIC = 'automatic',\n}\n\n/**\n * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).\n *\n * @platform ios\n */\nexport enum UIImagePickerPreferredAssetRepresentationMode {\n  /**\n   * A mode that indicates that the system chooses the appropriate asset representation.\n   */\n  Automatic = 'automatic',\n  /**\n   * A mode that uses the most compatible asset representation.\n   */\n  Compatible = 'compatible',\n  /**\n   * A mode that uses the current representation to avoid transcoding, if possible.\n   */\n  Current = 'current',\n}\n\nexport enum CameraType {\n  /**\n   * Back/rear camera.\n   */\n  back = 'back',\n  /**\n   * Front camera\n   */\n  front = 'front',\n}\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerAsset` instead\n */\nexport type ImageInfo = ImagePickerAsset;\n\n/**\n * Represents an asset (image or video) returned by the image picker or camera.\n */\nexport type ImagePickerAsset = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * The unique ID that represents the picked image or video, if picked from the library. It can be used\n   * by [expo-media-library](./media-library) to manage the picked asset.\n   *\n   * > This might be `null` when the ID is unavailable or the user gave limited permission to access the media library.\n   * > On Android, the ID is unavailable when the user selects a photo by directly browsing file system.\n   *\n   * @platform ios\n   * @platform android\n   */\n  assetId?: string | null;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   */\n  type?: 'image' | 'video';\n  /**\n   * Preferred filename to use when saving this item. This might be `null` when the name is unavailable\n   * or user gave limited permission to access the media library.\n   *\n   * @platform ios\n   */\n  fileName?: string | null;\n  /**\n   * File size of the picked image or video, in bytes.\n   *\n   * @platform ios\n   */\n  fileSize?: number;\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   */\n  exif?: Record<string, any> | null;\n  /**\n   * When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`.\n   * If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string | null;\n  /**\n   * Length of the video in milliseconds or `null` if the asset is not a video.\n   */\n  duration?: number | null;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * Type representing successful and canceled pick result.\n */\nexport type ImagePickerResult = ImagePickerSuccessResult | ImagePickerCanceledResult;\n\n/**\n * Type representing successful pick result.\n */\nexport type ImagePickerSuccessResult = {\n  /**\n   * Boolean flag set to `false` showing that the request was successful.\n   */\n  canceled: false;\n  /**\n   * An array of picked assets.\n   */\n  assets: ImagePickerAsset[];\n};\n\n/**\n * Type representing canceled pick result.\n */\nexport type ImagePickerCanceledResult = {\n  /**\n   * Boolean flag set to `true` showing that the request was canceled.\n   */\n  canceled: true;\n  /**\n   * `null` signifying that the request was canceled.\n   */\n  assets: null;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` instead.\n */\nexport type ImagePickerCancelledResult = ImagePickerCanceledResult;\n\n/**\n * @hidden\n * @deprecated `ImagePickerMultipleResult` has been deprecated in favor of `ImagePickerResult`.\n */\nexport type ImagePickerMultipleResult = ImagePickerResult;\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   *\n   * > - Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.\n   * > - On iOS, this option is ignored if `allowsMultipleSelection` is enabled.\n   * > - On iOS cropping a `.bmp` image will convert it to `.png`.\n   *\n   * @default false\n   * @platform ios\n   * @platform android\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   *\n   * > Note: On iOS, if a `.bmp` or `.png` image is selected from the library, this option is ignored.\n   *\n   * @default 0.2\n   * @platform ios\n   * @platform android\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes?: MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated See [`videoExportPreset`](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   * in Apple documentation.\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to the highest quality available for the device.\n   * @default ImagePicker.UIImagePickerControllerQualityType.High\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   *\n   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsEditing`.\n   * > If this option is enabled, then `allowsEditing` is ignored.\n   *\n   * @default false\n   * @platform ios 14+\n   * @platform android\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * The maximum number of items that user can select. Applicable when `allowsMultipleSelection` is enabled.\n   * Setting the value to `0` sets the selection limit to the maximum that the system supports.\n   *\n   * @platform ios 14+\n   * @platform android\n   * @default 0\n   */\n  selectionLimit?: number;\n  /**\n   * Whether to display number badges when assets are selected. The badges are numbered\n   * in selection order. Assets are then returned in the exact same order they were selected.\n   *\n   * > Assets should be returned in the selection order regardless of this option,\n   * > but there is no guarantee that it is always true when this option is disabled.\n   *\n   * @platform ios 15+\n   * @default false\n   */\n  orderedSelection?: boolean;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n  /**\n   * Selects the camera-facing type. The `CameraType` enum provides two options:\n   * `front` for the front-facing camera and `back` for the back-facing camera.\n   * - **On Android**, the behavior of this option may vary based on the camera app installed on the device.\n   * @default CameraType.back\n   * @platform ios\n   * @platform android\n   */\n  cameraType?: CameraType;\n  /**\n   * Choose [preferred asset representation mode](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode)\n   * to use when loading assets.\n   * @default ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic\n   * @platform ios 14+\n   */\n  preferredAssetRepresentationMode?: UIImagePickerPreferredAssetRepresentationMode;\n};\n\n// @needsAudit\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes: MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` or `OpenFileBrowserOptions` instead.\n */\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerResult\n    : ImagePickerResult;\n", "import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  ImagePickerAsset,\n  ImagePickerResult,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n} from './ImagePicker.types';\n\nconst MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/mp4,video/quicktime,video/x-m4v,video/*',\n};\n\nexport default {\n  get name(): string {\n    return 'ExponentImagePicker';\n  },\n\n  async launchImageLibraryAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      base64,\n    });\n  },\n\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: true,\n      base64,\n    });\n  },\n\n  /*\n   * Delegate to expo-permissions to request camera permissions\n   */\n  async getCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n  async requestCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n\n  /*\n   * Camera roll permissions don't need to be requested on web, so we always\n   * respond with granted.\n   */\n  async getMediaLibraryPermissionsAsync(_writeOnly: boolean) {\n    return permissionGrantedResponse();\n  },\n  async requestMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse> {\n    return permissionGrantedResponse();\n  },\n};\n\nfunction permissionGrantedResponse(): PermissionResponse {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true,\n  };\n}\n\nfunction openFileBrowserAsync({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n  base64,\n}: OpenFileBrowserOptions): Promise<ImagePickerResult> {\n  const mediaTypeFormat = MediaTypeInput[mediaTypes];\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', String(Math.random()));\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve) => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        const files = allowsMultipleSelection ? input.files : [input.files[0]];\n        const assets: ImagePickerAsset[] = await Promise.all(\n          Array.from(files).map((file) => readFile(file, { base64 }))\n        );\n\n        resolve({ canceled: false, assets });\n      } else {\n        resolve({ canceled: true, assets: null });\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile: Blob, options: { base64: boolean }): Promise<ImagePickerAsset> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const returnRaw = () => resolve({ uri, width: 0, height: 0 });\n\n      if (typeof uri === 'string') {\n        const image = new Image();\n        image.src = uri;\n        image.onload = () => {\n          resolve({\n            uri,\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),\n          });\n        };\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n", "import {\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  createPermissionHook,\n  UnavailabilityError,\n  CodedError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  MediaLibraryPermissionResponse,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  ImagePickerOptions,\n} from './ImagePicker.types';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\nconst DEPRECATED_RESULT_KEYS = [\n  'uri',\n  'assetId',\n  'width',\n  'height',\n  'type',\n  'exif',\n  'base64',\n  'duration',\n  'fileName',\n  'fileSize',\n];\nfunction mergeDeprecatedResult(result: ImagePickerResult): ImagePickerResult {\n  const firstAsset = result?.assets?.[0];\n  const deprecatedResult = {\n    ...result,\n    get cancelled() {\n      console.warn(\n        'Key \"cancelled\" in the image picker result is deprecated and will be removed in SDK 48, use \"canceled\" instead'\n      );\n      return this.canceled;\n    },\n  };\n  for (const key of DEPRECATED_RESULT_KEYS) {\n    Object.defineProperty(deprecatedResult, key, {\n      get() {\n        console.warn(\n          `Key \"${key}\" in the image picker result is deprecated and will be removed in SDK 48, you can access selected assets through the \"assets\" array instead`\n        );\n        return firstAsset?.[key];\n      },\n    });\n  }\n  return deprecatedResult;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an array of objects of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, to the array of [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** an empty array.\n */\nexport async function getPendingResultAsync(): Promise<\n  (ImagePickerResult | ImagePickerErrorResult)[]\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return [];\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  const result = await ExponentImagePicker.launchCameraAsync(validateOptions(options));\n  return mergeDeprecatedResult(result);\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n *\n * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.\n *\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchImageLibraryAsync(\n  options?: ImagePickerOptions\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (options?.allowsEditing && options.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  const result = await ExponentImagePicker.launchImageLibraryAsync(options ?? {});\n  return mergeDeprecatedResult(result);\n}\n\nexport * from './ImagePicker.types';\n\nexport { PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse };\n"],
  "mappings": "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",
  "names": ["MediaTypeOptions", "VideoExportPreset", "UIImagePickerControllerQualityType", "UIImagePickerPresentationStyle", "UIImagePickerPreferredAssetRepresentationMode", "CameraType"]
}
